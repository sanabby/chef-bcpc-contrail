#!/usr/bin/env python                                                                                                                                        

"""Checks in mysql database for hung nova services and restarts them                                                                                         
                                                                                                                                                             
Ideally this should even not exist, but nova does seem to hang up 
quite often for many reasons, e.g.:
* rabbit q's failing over
* database connection being reset
* inconsistent state in DB and libvirt

This script has some guards against continuosly restarting services (--retry)

                                                                                                                                                             
"""
import requests 
import syslog 
import re 
import subprocess

def restart_service(service, retry):
    restart_file = "/tmp/nova-restarts.json"
    last_starts = {}
    if os.path.exists(restart_file):
       last_starts = json.load(open(restart_file))
    if service not in last_starts:
        last_starts[service] = 0
    if time.time() - last_starts[service]<args.retry:
       return False

    output = subprocess.check_output(["/sbin/initctl", "status", service])
    rr = re.compile(".*, process (\d+)")
    m = rr.match(output)
    pid = None
    if m:
       pid = int(m.groups()[0])
    syslog.syslog(syslog.LOG_NOTICE, "restartng %s(%s)" % (service, str(pid)))
    last_starts[service] = time.time()
    if pid:
       if subprocess.call(["/sbin/restart", service]):
          syslog.syslog(syslog.LOG_ERR, "restart %s failed" % service)
    else:
       if subprocess.call(["/sbin/start", service]):
          sys.stderr.write(syslog.LOG_ERR, "start %s failed" % service)
    f = open(restart_file, "w")
    json.dump(last_starts, f)
    f.close()
    return True

def check_api():
   " basically curl -m 2  169.254.169.254:8775"
   try:
      r = requests.get('http://169.254.169.254:8775', timeout=1.0)
   except requests.exceptions.Timeout:
      syslog.syslog(syslog.LOG_ERR, "nova-api timeout")
      return False
   except requests.exceptions.ConnectionError:
      syslog.syslog(syslog.LOG_ERR, "nova-api connection error")
      return False

   if r.status_code != 200:
      syslog.syslog(syslog.LOG_ERR, "nova-api request returned %d" % (r.status_code))
      return False

   return True

if __name__ == '__main__':
   import sys
   import re
   import MySQLdb as mdb
   import argparse
   import os

   import json
   import time



   parser = argparse.ArgumentParser(description='Restart nova services')
   parser.add_argument('-n', '--no-op', dest='noop', action='store_true',
                       default=False,
                       help='Dont actualy do anything, dry-run.')
   parser.add_argument('-i', '--host', dest='host',  default='localhost', help="database host")
   parser.add_argument('-u', '--user', dest='user', default='root', help="database user")
   parser.add_argument('-p', '--password', dest='password', default='', help="database password")
   parser.add_argument('-t', '--down', dest='down', type=int, default=20, help="Max time (in sec) that a service can be down.")
   parser.add_argument('-r', '--retry', dest='retry', type=int, default=300, help="Retry time in s, defaults 5m (300)")
   args = parser.parse_args()


   con = mdb.connect(args.host, args.user, args.password, db="nova")
   c = con.cursor()
   hostname = os.uname()[1]

   c.execute("""select TIME_TO_SEC(TIMEDIFF(UTC_timestamp(), updated_at)) as dt, services.binary from services where host=%s""",
             (hostname,))
   row = c.fetchone()
   while row:
      dt = int(row[0])
      service = row[1]
      if dt > args.down and not args.noop:     
        restart_service(service, args.retry)
      row = c.fetchone()
   if not check_api():
      restart_service("nova-api", args.retry)
   sys.exit(0)



